plugins {
	id 'org.springframework.boot' version '2.2.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
}

ext {
	longName = 'AWS Secret Parameters Annotations Test App'
	description = 'An application to test the new annotations for using AWS Secrets and Parameters'
	assetOwner = 'Tim Hay'
	pkg = 'aws-secure-config-client'
	groupId = 'au.com.haystacker.' + pkg
	artifactId = pkg + '-api'
	artifactVersion = version
}

// apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'idea'

// project artifact info
group = groupId
version = '0.0.1-SNAPSHOT'
archivesBaseName = artifactId

sourceCompatibility = '1.8'

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	// providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.apache.commons:commons-lang3'
	implementation 'au.com.haystacker:secure-aws-config:2.0.0'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	testRuntime("com.h2database:h2")

	runtime("mysql:mysql-connector-java")
}

test {
	useJUnitPlatform()
}

/**
 * Patches the application.yaml file with values from the build
 */
import org.apache.tools.ant.filters.ReplaceTokens
processResources {

	println "Substituting project @ext.params@ in application.yml."

	with copySpec {
		from 'src/main/resources'
		include '**/application*.yml'
		rootProject.ext.properties.each {
			k, v ->
				println "substituting ${k}:${v}"
				filter(ReplaceTokens, tokens: [ ('ext.' + k): v])
		}
	}
}
bootRun.dependsOn processResources

processTestResources {

	println "Substituting project @ext.params@ in application.yaml."

	with copySpec {
		from 'src/test/resources'
		include '**/application*.yml'
		rootProject.ext.properties.each {
			k, v ->
				println "substituting ${k}:${v}"
				filter(ReplaceTokens, tokens: [ ('ext.' + k): v])
		}
	}
}


/*
bootWar.doFirst {
	manifest {
		attributes('Implementation-Title': rootProject.ext.artifactId,
				'Implementation-Version': rootProject.ext.artifactVersion,
				'Created-By': rootProject.ext.assetOwner,
				'Built-By': System.getProperty('user.name'),
				'Built-JDK': System.getProperty('java.version'),
				'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				'Source-Compatibility': project.sourceCompatibility,
				'Target-Compatibility': project.targetCompatibility
		)
	}
}
*/